---
layout: post
title: "Database 정리"
subtitle: ""
date: 2020-07-06
author: KimJunHee
category: Setting
tags: transaction database
permalink: /test/database/
finished: true
---


## Index

* Index란 무엇인가?
* Index 내부 알고리즘 설명 (hash, b+트리)
* Index 사용 시 고려해야 할 것은 무엇인가?

## Lock

* 교착상태에 대해 설명해보시오.
* 교착상태가 걸리는 시나리오를 직접 말해보시오
* lock 종류들
* Xlock, Slock 설명하기
* TX락이란?
* MySql DB Engine인 Inno DB, 내부 DB 엔진들 써봤냐? 뭐가 다르냐>

## Transaction 냐

* ACID에 대해 설명해라
* 고립상태에서의 락 레벨에 대해 설명하고 효과적으로 구현해봐라

---


## Transaction

Transaction이란 작업수행의 논리적 단위 (Query의 묶음)

### ACID

#### 원자성(Atomicity)

* 하나의 데이터 처리를 원자적 수행 단위로 수행합니다.
* 즉, All or Noting의 개념으로서 작업 단위를 일부분만 실행하지 않는다는 것을 의미합니다.

#### 일관성(Consistency)

* 트랜잭션 프로그램은 데이터베이스의 일관성을 유지해야 한다.
* 즉, 처음에 일관적인 데이터베이스에서 트랜잭션을 수행하는 경우, 트랜잭션 실행 종료 후에도 데이터베이스는 일관적이어야 한다.
* 일관성이란 '내부적 일관성'을 의미한다. 데이터베이스 측면에서는 데이터베이스가 적어도 무결성 제약조건(integrity constraint)을 모두 충족시킨다는 의미다.
* Primary Key는 유일해야 한다.
  * (예: 두 종업원의 기록에 동일한 종업원 번호는 없다.)
* 데이터베이스는 참조 무결성(referential integrity)을 가져야 하며, 이는 레코드가 참조하는 객체는 반드시 존재해야 한다는 의미다.
  * (예: 주문 레코드에 의해 참조되는 고객 레코드가 존재)
* 어떤 데이터 값은 특정 범위 내에 있어야 한다.
  * (예: 연령은 120세 이하이며 주민등록번호는 0이 아니다.)

#### 격리성(Isolation)

* 동시에 실행되는 여러 개의 트랜잭션이 서로 영향을 주지 않는 성질이다.
* 동시에 실행되는 트랜잭션은 서로 격리된다는 것을 의미한다.
* 고립성은 기술적으로 "직렬성(serializability)"으로 정의되곤 한다. 즉 실행 결과의 관점에서, 개별 트랜잭션의 실행 결과가 트랜잭션을 직렬로 실행했을 때와 결과가 같다면 고립성을 준수하고 있는 것이다.
* 어떤 실행의 결과가 트랜잭션의 어떤 두 실행과 중복 없이 순차적으로 연달아서 이들 트랜잭션을 직렬로 실행하는 것과 같은 경우에 그 실행은 직렬적이라고 하며, 트랜잭션을 한 번에 하나씩 실행하는 것과 같은 결과이다.

고립성을 잘 갖춘 시스템이라면, 사용자 관점에서는 시스템을 혼자서만 사용하고 있는 것처럼 생각하고 이용할 수 있다.
DB는 여러 트랜잭션을 병렬로 수행하기 위해 각 트랜잭션이 엑세스하는 데이터에 잠금(locking)을 설정한다.
모든 처리를 직렬로만 처리하면 너무 비효율적이기 때문.
잠금 처리를 통해 여러 트랜잭션의 실행이 직렬로(순서대로) 일어나는 것처럼 보이게 하는 것이 중요.

#### 지속성(Durability)

* 데이터 처리에 의해 변경된 내용은 이후 어떠한 고장이 있어도 손상되어서는 안됨
* 즉, 트랜잭션이 일단 그 실행을 성공적으로 완료하면 그 결과는 데이터베이스에 영속적으로 저장된다.
* MySQL을 포함해 많은 데이터베이스의 구현에서는 트랜젝션 조작(행위)를 하드 디스크에 로그로 기록하고 시스템에 이상이 발생하면 그 로그를 사용해 이상 발생 전까지 복원하는 것으로 지속성을 실현하고 있다. (Database Snapsot에 해당하는 것이 아님을 기억한다.)





<br/>

### Transaction State

![transactio_state](/assets/transactio_state.png)

- 활동(Active) : 트랜잭션이 실행중인 상태
- 실패(Failed) : 트랜잭션 실행에 오류가 발생하여 중단된 상태
- 철회(Aborted) : 트랜잭션이 비정상적으로 종료되어 Rollback 연산을 수행한 상태
- 부분 완료(Partially Committed) : 트랜잭션의 마지막 연산까지 실행했지만, Commit 연산이 실행되기 직전의 상태
- 완료(Committed) : 트랜잭션이 성공적으로 종료되어 Commit 연산을 실행한 후의 상태




<br/>

### Transaction의 동시성




<br/><br/>

## Reference

* [Transaction ACID](https://johngrib.github.io/wiki/ACID/)


